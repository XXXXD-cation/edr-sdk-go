// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package network

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadNetwork_bpf returns the embedded CollectionSpec for network_bpf.
func loadNetwork_bpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Network_bpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load network_bpf: %w", err)
	}

	return spec, err
}

// loadNetwork_bpfObjects loads network_bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*network_bpfObjects
//	*network_bpfPrograms
//	*network_bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNetwork_bpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNetwork_bpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// network_bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type network_bpfSpecs struct {
	network_bpfProgramSpecs
	network_bpfMapSpecs
	network_bpfVariableSpecs
}

// network_bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type network_bpfProgramSpecs struct {
	KprobeTcpV4Connect *ebpf.ProgramSpec `ebpf:"kprobe_tcp_v4_connect"`
	KprobeTcpV6Connect *ebpf.ProgramSpec `ebpf:"kprobe_tcp_v6_connect"`
}

// network_bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type network_bpfMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// network_bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type network_bpfVariableSpecs struct {
}

// network_bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNetwork_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type network_bpfObjects struct {
	network_bpfPrograms
	network_bpfMaps
	network_bpfVariables
}

func (o *network_bpfObjects) Close() error {
	return _Network_bpfClose(
		&o.network_bpfPrograms,
		&o.network_bpfMaps,
	)
}

// network_bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNetwork_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type network_bpfMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *network_bpfMaps) Close() error {
	return _Network_bpfClose(
		m.Events,
	)
}

// network_bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadNetwork_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type network_bpfVariables struct {
}

// network_bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNetwork_bpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type network_bpfPrograms struct {
	KprobeTcpV4Connect *ebpf.Program `ebpf:"kprobe_tcp_v4_connect"`
	KprobeTcpV6Connect *ebpf.Program `ebpf:"kprobe_tcp_v6_connect"`
}

func (p *network_bpfPrograms) Close() error {
	return _Network_bpfClose(
		p.KprobeTcpV4Connect,
		p.KprobeTcpV6Connect,
	)
}

func _Network_bpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed network_bpf_bpfel.o
var _Network_bpfBytes []byte
